// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 기본 정보
model User {
  id          String   @id @default(cuid())
  phone       String   @unique
  name        String?
  email       String?
  profileImage String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  socialAccounts    SocialAccount[]
  phoneVerifications PhoneVerification[]
  jwtTokens         JwtToken[]

  @@map("users")
}

// 소셜 로그인 계정 연결
model SocialAccount {
  id          String   @id @default(cuid())
  userId      String
  provider    String   // 'google', 'kakao'
  providerId  String   // 소셜 로그인 제공자의 사용자 ID
  email       String?
  name        String?
  profileImage String?
  accessToken String?  @db.VarChar(1000)
  refreshToken String? @db.VarChar(1000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("social_accounts")
}

// 전화번호 인증 이력
model PhoneVerification {
  id            String   @id @default(cuid())
  userId        String?
  phone         String
  verificationCode String
  isVerified    Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  // 관계
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("phone_verifications")
}

// JWT 토큰 발급/사용 이력
model JwtToken {
  id           String   @id @default(cuid())
  userId       String
  tokenType    String   // 'access' or 'refresh'
  token        String   @db.VarChar(1000)
  isRevoked    Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("jwt_tokens")
}
