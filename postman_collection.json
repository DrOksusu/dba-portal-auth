{
  "info": {
    "name": "DBA Portal Auth API",
    "description": "Complete API collection for DBA Portal Authentication Server",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3002",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "서버 상태 확인"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success field\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "});",
              "",
              "pm.test(\"Health status is OK\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.status).to.eql(\"OK\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Authentication Flow",
      "item": [
        {
          "name": "2.1 Send SMS Verification",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"{{phone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-verification"]
            },
            "description": "전화번호로 SMS 인증 코드 발송. 개발 환경에서는 서버 콘솔에 코드 출력."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"SMS sent successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"발송\");",
                  "});",
                  "",
                  "console.log(\"⚠️ 서버 콘솔에서 인증 코드를 확인하세요!\");"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2.2 Verify Phone",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"{{phone}}\",\n  \"verificationCode\": \"{{verificationCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-phone",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-phone"]
            },
            "description": "SMS로 받은 인증 코드 검증. 서버 콘솔의 코드를 Environment의 verificationCode에 입력하세요."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Phone verified successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data.verified).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2.3 Complete Social Login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"{{phone}}\",\n  \"verificationCode\": \"{{verificationCode}}\",\n  \"socialProfile\": {\n    \"provider\": \"kakao\",\n    \"providerId\": \"1234567890\",\n    \"email\": \"test@kakao.com\",\n    \"name\": \"테스트사용자\",\n    \"profileImage\": \"https://example.com/profile.jpg\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/complete-social-login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "complete-social-login"]
            },
            "description": "전화번호 인증 완료 후 소셜 계정 연결 및 회원가입/로그인 완료. Access Token과 Refresh Token 발급."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tokens are returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.tokens).to.have.property(\"accessToken\");",
                  "    pm.expect(jsonData.data.tokens).to.have.property(\"refreshToken\");",
                  "});",
                  "",
                  "// 자동으로 토큰 저장",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.tokens) {",
                  "        pm.environment.set(\"accessToken\", response.data.tokens.accessToken);",
                  "        pm.environment.set(\"refreshToken\", response.data.tokens.refreshToken);",
                  "        pm.environment.set(\"userId\", response.data.user.id);",
                  "        console.log(\"✅ Tokens saved to environment\");",
                  "        console.log(\"Access Token:\", response.data.tokens.accessToken.substring(0, 20) + \"...\");",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "2.4 Refresh Token",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh Token을 사용하여 새로운 Access Token과 Refresh Token 발급"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New tokens are returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.tokens).to.have.property(\"accessToken\");",
                  "    pm.expect(jsonData.data.tokens).to.have.property(\"refreshToken\");",
                  "});",
                  "",
                  "// 자동으로 새 토큰 저장",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.tokens) {",
                  "        pm.environment.set(\"accessToken\", response.data.tokens.accessToken);",
                  "        pm.environment.set(\"refreshToken\", response.data.tokens.refreshToken);",
                  "        console.log(\"✅ Tokens refreshed and saved\");",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Protected Endpoints",
      "item": [
        {
          "name": "3.1 Get My Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "현재 로그인한 사용자 정보 조회 (Bearer Token 필요)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property(\"id\");",
                  "    pm.expect(jsonData.data).to.have.property(\"phone\");",
                  "    pm.expect(jsonData.data).to.have.property(\"socialAccounts\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "3.2 Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"수정된이름\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "사용자 프로필 정보 수정 (이름, 이메일)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"업데이트\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "3.3 Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "로그아웃 (현재 Access Token 무효화)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "// 토큰 삭제 (선택사항)",
                  "// pm.environment.unset(\"accessToken\");",
                  "// pm.environment.unset(\"refreshToken\");",
                  "// console.log(\"✅ Logged out, tokens cleared\");"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "3.4 Deactivate Account",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/account",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "account"]
            },
            "description": "계정 비활성화 (복구 가능, 소프트 삭제)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Account deactivated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"비활성화\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Error Cases",
      "item": [
        {
          "name": "4.1 Invalid Phone Format",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"invalid-phone\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-verification"]
            },
            "description": "잘못된 전화번호 형식 에러 테스트 (400 Bad Request 예상)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message is returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "4.2 Invalid Verification Code",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"{{phone}}\",\n  \"verificationCode\": \"000000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-phone",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-phone"]
            },
            "description": "잘못된 인증 코드 에러 테스트 (400 Bad Request 예상)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates wrong code\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "4.3 Missing Authorization",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Authorization 헤더 누락 에러 테스트 (401 Unauthorized 예상)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates missing auth\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "4.4 Invalid Access Token",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid_token_here",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "잘못된 Access Token 에러 테스트 (401 Unauthorized 예상)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates invalid token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 전역 Pre-request Script",
          "pm.globals.set(\"timestamp\", new Date().toISOString());",
          "console.log(`🚀 ${pm.request.method} ${pm.request.url}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 전역 Test Script",
          "console.log(`✅ Response: ${pm.response.code} ${pm.response.status}`);"
        ]
      }
    }
  ]
}
